{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Wallet App",
    "description": "Webb application for personal finances management."
  },
  "servers": [
    {
      "url": "https://awesome-wallet-app.herokuapp.com",
      "description": "Production server for Wallet App"
    },
    {
      "url": "http://localhost:8888",
      "description": "Development server for Wallet App"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication & authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Statistics",
      "description": "Statisctics endpoints"
    },
    {
      "name": "Categories",
      "description": "Categories endpoints"
    },
    {
      "name": "Transactions",
      "description": "Transactions endpoints"
    }
  ],
  "paths": {
    "/auth/registration": {
      "post": {
        "tags": ["Auth"],
        "summary": "Registration of a user",
        "parameters": [],
        "security": [],
        "requestBody": {
          "description": "Registration request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registrationBadRequestErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email is in use response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registrationConflictErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limitRateExceededResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logging in a user",
        "parameters": [],
        "security": [],
        "requestBody": {
          "description": "Login request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loginBadRequestErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limitRateExceededResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logging a user out",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Success logout response",
            "content": {}
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "get": {
        "tags": ["Auth"],
        "summary": "Refreshing a pair of tokens: refresh and access",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "tags": ["User"],
        "summary": "Getting current user's information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/currentUserSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Getting statics for given period of time",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2021-07-01"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2021-08-01"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatisticsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatisticsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/hardcoded": {
      "get": {
        "tags": ["Categories"],
        "summary": "Getting hardcoded categories as per Specification",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getHardcodedCategoriesSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": ["Categories"],
        "summary": "Creating a new category",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Create category request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createCategorySuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createCategoryErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Categories"],
        "summary": "Getting all categories",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCategoriesSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Getting category by ID",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "description": "Category ID",
            "schema": {
              "type": "string",
              "example": "60eacf5d380abb12909f6897"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCategorySuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invalidDbIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Categories"],
        "summary": "Updating category by ID",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "description": "Category ID",
            "schema": {
              "type": "string",
              "example": "60eacf5d380abb12909f6897"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update category request body. At least one field is required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCategorySuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createCategoryErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Deleting category by ID",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "description": "Category ID",
            "schema": {
              "type": "string",
              "example": "60eacf5d380abb12909f6897"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteCategorySuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invalidDbIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Creating a new transaction",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Create transaction request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createTransactionSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createTransactionErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Transactions"],
        "summary": "Getting all transactions of a user",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "5 is by default",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "0 is by default",
            "schema": {
              "type": "integer",
              "example": 0
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransactionsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/queryParamsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Getting transaction by ID",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "description": "Transaction ID",
            "schema": {
              "type": "string",
              "example": "60e997e4a7140241b40fcc70"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransactionSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invalidDbIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Transactions"],
        "summary": "Updating transaction by ID",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "description": "Transaction ID",
            "schema": {
              "type": "string",
              "example": "60e997e4a7140241b40fcc70"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update transaction request body. At least one field is required",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getTransactionSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createTransactionErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Transactions"],
        "summary": "Deleting transaction by ID",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "description": "Transaction ID",
            "schema": {
              "type": "string",
              "example": "60e997e4a7140241b40fcc70"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteTransactionSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invalidDbIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "registrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Test"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "test123456"
          }
        }
      },
      "loginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "test123456"
          }
        }
      },
      "authSuccessResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZTQzNmUyZGZiYzZiMGRlMDYyNzQ3NCIsIm5hbWUiOiJXYWxsZXQiLCJlbWFpbCI6InRoZWNhcnJvdGE1YUB1a3IubmV0IiwiaWF0IjoxNjI1NTY4OTk0LCJleHAiOjE2MjU1NzYxOTR9.YbZLT2ATVet_yYlMDuPUy5x_xfYJ7AXMDljGRRgS1pk"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZTQzNmUyZGZiYzZiMGRlMDYyNzQ3NCIsIm5hbWUiOiJXYWxsZXQiLCJlbWFpbCI6InRoZWNhcnJvdGE1YUB1a3IubmV0IiwiaWF0IjoxNjI1NTY4OTk0LCJleHAiOjE2MjgxNjA5OTR9.EXNWBeJ0kDpzf2rjrn6whU1cXItSGXnL117jLvJsoiE"
          },
          "user": {
            "type": "object",
            "description": "User's information object",
            "properties": {
              "id": {
                "type": "string",
                "description": "User's ID",
                "example": "60e3680607be0344645c9f01"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Test"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "registrationBadRequestErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Joi validation error message",
            "example": "'email' must be a valid email"
          }
        }
      },
      "registrationConflictErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 409
          },
          "message": {
            "type": "string",
            "description": "Conflict error message",
            "example": "This email is already in use."
          }
        }
      },
      "loginBadRequestErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Login error message",
            "example": "Invalid credentials."
          }
        }
      },
      "currentUserSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "Payload with current user basic info",
            "properties": {
              "name": {
                "type": "string",
                "description": "User name",
                "example": "Awesome Guest"
              },
              "email": {
                "type": "string",
                "description": "User email",
                "format": "email"
              }
            }
          }
        }
      },
      "getHardcodedCategoriesSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "array",
            "description": "Payload with an array of categories ojects",
            "items": {
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Category of transaction",
                  "example": "Регулярный доход"
                },
                "income": {
                  "type": "boolean",
                  "description": "Is category an income",
                  "example": true
                },
                "color": {
                  "type": "string",
                  "description": "Color of the transaction category",
                  "example": "#6e78e8"
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "categories": [
              {
                "name": "Регулярный доход",
                "income": true,
                "color": "#1b5e20"
              },
              {
                "name": "Продукты",
                "income": false,
                "color": "#4a56e2"
              },
              {
                "name": "Образование",
                "income": false,
                "color": "#c5baff"
              }
            ]
          }
        }
      },
      "getCategoriesSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "array",
            "description": "Payload with an array of categories ojects",
            "items": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Category ID",
                  "example": "60e2fcb6e0801939c8016539"
                },
                "name": {
                  "type": "string",
                  "description": "Category's name",
                  "example": "Образование"
                },
                "income": {
                  "type": "boolean",
                  "description": "Is category income",
                  "example": false
                },
                "color": {
                  "type": "string",
                  "description": "Custom color in hex format",
                  "example": "#009688"
                },
                "icon": {
                  "type": "string",
                  "description": "Custom icon name",
                  "example": "book-icon"
                },
                "owner": {
                  "type": "string",
                  "description": "Owner's ID",
                  "example": "60eac4cd7fb76924b8434d82"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date of entry creation",
                  "example": "2021-07-05T12:36:06.595Z"
                },
                "updatedAt": {
                  "type": "string",
                  "description": "Date of entry update",
                  "example": "2021-07-05T12:36:06.595Z"
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "categories": [
              {
                "income": false,
                "color": "#d84315",
                "icon": "book-icon",
                "name": "Образование",
                "owner": "60eac4cd7fb76924b8434d82",
                "createdAt": "2021-07-11T11:00:45.551Z",
                "updatedAt": "2021-07-11T11:00:45.551Z",
                "id": "60eacf5d380abb12909f6897"
              },
              {
                "income": true,
                "color": "#ffeb3b",
                "icon": "money-icon",
                "name": "ЗП Джуна",
                "owner": "60eac4cd7fb76924b8434d82",
                "createdAt": "2021-07-11T12:00:45.551Z",
                "updatedAt": "2021-07-11T12:00:45.551Z",
                "id": "60eacf5d380abb12909f6898"
              }
            ]
          }
        }
      },
      "getStatisticsSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "Payload with statistics for given period and balance totals",
            "properties": {
              "statistics": {
                "type": "array",
                "description": "Array of statistics objects",
                "items": {
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Category of transaction",
                      "example": "Регулярный доход"
                    },
                    "income": {
                      "type": "boolean",
                      "description": "Is category an income",
                      "example": true
                    },
                    "sum": {
                      "type": "integer",
                      "description": "Total amount of this type of transaction within given period",
                      "example": 500
                    },
                    "color": {
                      "type": "string",
                      "description": "Color of the transaction category",
                      "example": "#6e78e8"
                    }
                  }
                }
              },
              "totals": {
                "type": "object",
                "properties": {
                  "income": {
                    "type": "integer",
                    "description": "Amount of total income within given period",
                    "example": 500
                  },
                  "expense": {
                    "type": "integer",
                    "description": "Amount of total expenses within given period",
                    "example": 200
                  },
                  "balance": {
                    "type": "integer",
                    "description": "Amount of total current balance within given period",
                    "example": 300
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "statistics": [
              {
                "category": "Регулярный доход",
                "income": true,
                "sum": 1500,
                "color": "#1b5e20"
              },
              {
                "category": "Основные расходы",
                "income": false,
                "sum": 200,
                "color": "#fed057"
              },
              {
                "category": "Машина",
                "income": false,
                "sum": 300,
                "color": "#6e78e8"
              },
              {
                "category": "Продукты",
                "income": false,
                "sum": 400,
                "color": "#4a56e2"
              }
            ],
            "totals": {
              "income": 500,
              "expense": 900,
              "balance": 600
            }
          }
        }
      },
      "getStatisticsErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Joi validation error message",
            "example": "'endDate' is required"
          }
        }
      },
      "createCategoryRequest": {
        "type": "object",
        "required": ["name", "income"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Category's name",
            "example": "Образование"
          },
          "income": {
            "type": "boolean",
            "description": "Is category income",
            "example": false
          },
          "color": {
            "type": "string",
            "description": "Custom color in hex format",
            "example": "#009688"
          },
          "icon": {
            "type": "string",
            "description": "Custom icon name",
            "example": "book-icon"
          }
        }
      },
      "createCategorySuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 201
          },
          "data": {
            "type": "object",
            "description": "Payload with information about newly created category",
            "properties": {
              "id": {
                "type": "string",
                "description": "Category ID",
                "example": "60e2fcb6e0801939c8016539"
              },
              "name": {
                "type": "string",
                "description": "Category's name",
                "example": "Образование"
              },
              "income": {
                "type": "boolean",
                "description": "Is category income",
                "example": false
              },
              "color": {
                "type": "string",
                "description": "Custom color in hex format",
                "example": "#009688"
              },
              "icon": {
                "type": "string",
                "description": "Custom icon name",
                "example": "book-icon"
              },
              "owner": {
                "type": "string",
                "description": "Owner's ID",
                "example": "60eac4cd7fb76924b8434d82"
              },
              "createdAt": {
                "type": "string",
                "description": "Date of entry creation",
                "example": "2021-07-05T12:36:06.595Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date of entry update",
                "example": "2021-07-05T12:36:06.595Z"
              }
            }
          }
        }
      },
      "createTransactionRequest": {
        "type": "object",
        "required": ["date", "income", "category", "sum"],
        "properties": {
          "date": {
            "type": "string",
            "description": "Transaction's date indicated by user",
            "example": "2021-07-05"
          },
          "income": {
            "type": "boolean",
            "description": "Is transaction income",
            "example": false
          },
          "category": {
            "type": "string",
            "description": "Category of transaction",
            "example": "Основные расходы"
          },
          "comment": {
            "type": "string",
            "description": "User's comment about transaction",
            "example": "Круассан и чай"
          },
          "sum": {
            "type": "integer",
            "description": "Sum of transaction",
            "example": 30
          }
        }
      },
      "updateTransactionRequest": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Transaction's date indicated by user",
            "example": "2021-07-05"
          },
          "income": {
            "type": "boolean",
            "description": "Is transaction income",
            "example": false
          },
          "category": {
            "type": "string",
            "description": "Category of transaction",
            "example": "Основные расходы"
          },
          "comment": {
            "type": "string",
            "description": "User's comment about transaction",
            "example": "Круассан и чай"
          },
          "sum": {
            "type": "integer",
            "description": "Sum of transaction",
            "example": 30
          }
        }
      },
      "createTransactionSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 201
          },
          "data": {
            "type": "object",
            "description": "Payload with information about newly created tansaction",
            "properties": {
              "id": {
                "type": "string",
                "description": "Transaction ID",
                "example": "60e2fcb6e0801939c8016539"
              },
              "date": {
                "type": "string",
                "description": "Transaction's date indicated by user",
                "example": "2021-07-05"
              },
              "income": {
                "type": "boolean",
                "description": "Is transaction income",
                "example": false
              },
              "category": {
                "type": "string",
                "description": "Category of transaction",
                "example": "Продукты"
              },
              "comment": {
                "type": "string",
                "description": "User's comment about transaction",
                "example": "Ингредиенты для шакшуши"
              },
              "sum": {
                "type": "integer",
                "description": "Sum of transaction",
                "example": 400
              },
              "createdAt": {
                "type": "string",
                "description": "Date of entry creation",
                "example": "2021-07-05T12:36:06.595Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "Date of entry update",
                "example": "2021-07-05T12:36:06.595Z"
              }
            }
          }
        }
      },
      "createTransactionErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Joi validation error message",
            "example": "'date' must be in YYYY-MM-DD format"
          }
        }
      },
      "createCategoryErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Joi validation error message",
            "example": "'income' is required"
          }
        }
      },
      "getTransactionsSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "Payload with information about tansactions, pagination, and balance totals",
            "properties": {
              "transactions": {
                "type": "array",
                "description": "Array of transactions objects",
                "items": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Transaction ID",
                      "example": "60e2fcb6e0801939c8016539"
                    },
                    "category": {
                      "type": "string",
                      "description": "Category of transaction",
                      "example": "Регулярный доход"
                    },
                    "income": {
                      "type": "boolean",
                      "description": "Is category an income",
                      "example": true
                    },
                    "date": {
                      "type": "string",
                      "description": "Date indicated by the user",
                      "example": "2021-05-04T21:00:00.000Z"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Comment for the transaction",
                      "example": "ЗП Джуна"
                    },
                    "sum": {
                      "type": "integer",
                      "description": "Amount of the transaction",
                      "example": 500
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of entry creation",
                      "example": "2021-07-05T12:36:06.595Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of entry update",
                      "example": "2021-07-05T12:36:06.595Z"
                    }
                  }
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "totalTransactions": {
                    "type": "integer",
                    "description": "Amount of total transactions",
                    "example": 50
                  },
                  "offset": {
                    "type": "integer",
                    "description": "Amount of transactions to skip. 0 by default",
                    "example": 5
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Amount of transactions per page. 5 by default",
                    "example": 5
                  },
                  "totalPages": {
                    "type": "integer",
                    "description": "Amount of total pages",
                    "example": 10
                  },
                  "currentPage": {
                    "type": "integer",
                    "description": "Currently returned page",
                    "example": 1
                  },
                  "pagingCounter": {
                    "type": "integer",
                    "description": "Number of the first element on the current page",
                    "example": 1
                  },
                  "hasPrevPage": {
                    "type": "boolean",
                    "description": "If there is a page before the current page",
                    "example": false
                  },
                  "hasNextPage": {
                    "type": "boolean",
                    "description": "If there is a page after the current page",
                    "example": true
                  },
                  "prevPage": {
                    "type": "integer",
                    "description": "Number of the previous page. If no page - null is returned",
                    "example": null
                  },
                  "nextPage": {
                    "type": "integer",
                    "description": "Number of the next page. If no page - null is returned",
                    "example": 2
                  }
                }
              },
              "totals": {
                "type": "object",
                "properties": {
                  "income": {
                    "type": "integer",
                    "description": "Amount of total income",
                    "example": 500
                  },
                  "expense": {
                    "type": "integer",
                    "description": "Amount of total expenses",
                    "example": 200
                  },
                  "balance": {
                    "type": "integer",
                    "description": "Amount of total current balance",
                    "example": 300
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "transactions": [
              {
                "id": "60e2fcb6e0801939c8016539",
                "category": "Регулярный доход",
                "income": true,
                "date": "2021-05-04T21:00:00.000Z",
                "comment": "ЗП Джуна",
                "sum": 500,
                "createdAt": "2021-07-05T12:36:06.595Z",
                "updatedAt": "2021-07-05T12:36:06.595Z"
              },
              {
                "id": "60e2fccce0801939c801653b",
                "category": "Основные расходы",
                "income": false,
                "date": "2021-05-04T21:00:00.000Z",
                "comment": "Еда",
                "sum": 200,
                "createdAt": "2021-07-05T12:36:28.570Z",
                "updatedAt": "2021-07-05T12:36:28.570Z"
              }
            ],
            "pagination": {
              "totalTransactions": 10,
              "offset": 0,
              "limit": 5,
              "totalPages": 2,
              "currentPage": 1,
              "pagingCounter": 1,
              "hasPrevPage": false,
              "hasNextPage": true,
              "prevPage": null,
              "nextPage": 2
            },
            "totals": {
              "income": 500,
              "expense": 200,
              "balance": 300
            }
          }
        }
      },
      "getTransactionSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "Payload with information about tansactions, pagination, and balance totals",
            "properties": {
              "transaction": {
                "type": "object",
                "description": "Requested transaction",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Transaction ID",
                    "example": "60e2fcb6e0801939c8016539"
                  },
                  "category": {
                    "type": "string",
                    "description": "Category of transaction",
                    "example": "Регулярный доход"
                  },
                  "income": {
                    "type": "boolean",
                    "description": "Is category an income",
                    "example": true
                  },
                  "date": {
                    "type": "string",
                    "description": "Date indicated by the user",
                    "example": "2021-05-04T21:00:00.000Z"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment for the transaction",
                    "example": "ЗП Джуна"
                  },
                  "sum": {
                    "type": "integer",
                    "description": "Amount of the transaction",
                    "example": 500
                  },
                  "createdAt": {
                    "type": "string",
                    "description": "Date of entry creation",
                    "example": "2021-07-05T12:36:06.595Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "description": "Date of entry update",
                    "example": "2021-07-05T12:36:06.595Z"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Owner's ID",
                    "example": "60e973cfe53c0b3ed49951c1"
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "transaction": {
              "income": false,
              "category": "Машина",
              "comment": "Чистка ноутбука",
              "date": "2021-08-01T00:00:00.000Z",
              "sum": 700,
              "owner": "60e973cfe53c0b3ed49951c1",
              "createdAt": "2021-07-10T12:51:48.716Z",
              "updatedAt": "2021-07-10T12:51:48.716Z",
              "id": "60e997e4a7140241b40fcc70"
            }
          }
        }
      },
      "queryParamsErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Joi validation error message",
            "example": "'limit' must be a number"
          }
        }
      },
      "invalidDbIdResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Validation error message",
            "example": "Invalid params id."
          }
        }
      },
      "unauthorizedErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Unauthorized error message",
            "example": "Not authorized."
          }
        }
      },
      "limitRateExceededResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 429
          },
          "message": {
            "type": "string",
            "description": "Rate limit exceeded error message",
            "example": "Too many requests. Please try again later."
          }
        }
      },
      "resourceNotFoundResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "error"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 404
          },
          "message": {
            "type": "string",
            "description": "Resource not found error message",
            "example": "Not found"
          }
        }
      },
      "deleteTransactionSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Transaction was successfully deleted."
          }
        }
      },
      "getCategorySuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "Payload with a category oject",
            "properties": {
              "category": {
                "type": "object",
                "description": "Category object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Category ID",
                    "example": "60e2fcb6e0801939c8016539"
                  },
                  "name": {
                    "type": "string",
                    "description": "Category's name",
                    "example": "Образование"
                  },
                  "income": {
                    "type": "boolean",
                    "description": "Is category income",
                    "example": false
                  },
                  "color": {
                    "type": "string",
                    "description": "Custom color in hex format",
                    "example": "#009688"
                  },
                  "icon": {
                    "type": "string",
                    "description": "Custom icon name",
                    "example": "book-icon"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Owner's ID",
                    "example": "60eac4cd7fb76924b8434d82"
                  },
                  "createdAt": {
                    "type": "string",
                    "description": "Date of entry creation",
                    "example": "2021-07-05T12:36:06.595Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "description": "Date of entry update",
                    "example": "2021-07-05T12:36:06.595Z"
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "data": {
            "category": {
              "income": false,
              "color": "#d84315",
              "icon": "book-icon",
              "name": "Образование",
              "owner": "60eac4cd7fb76924b8434d82",
              "createdAt": "2021-07-11T11:00:45.551Z",
              "updatedAt": "2021-07-11T11:00:45.551Z",
              "id": "60eacf5d380abb12909f6897"
            }
          }
        }
      },
      "updateCategoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category's name",
            "example": "Образование"
          },
          "income": {
            "type": "boolean",
            "description": "Is category income",
            "example": false
          },
          "color": {
            "type": "string",
            "description": "Custom color in hex format",
            "example": "#009688"
          },
          "icon": {
            "type": "string",
            "description": "Custom icon name",
            "example": "book-icon"
          }
        }
      },
      "deleteCategorySuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Operation status",
            "example": "success"
          },
          "code": {
            "type": "integer",
            "description": "HTTP code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Category was successfully deleted."
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    }
  }
}
